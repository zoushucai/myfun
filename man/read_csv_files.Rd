% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_csv_files.R
\name{read_csv_files}
\alias{read_csv_files}
\title{读取所有符合要求的csv文件}
\usage{
read_csv_files(...)
}
\arguments{
\item{...}{
  Arguments passed on to \code{\link[base:list.files]{base::list.files}}
  \describe{
    \item{\code{path}}{a character vector of full path names; the default
    corresponds to the working directory, \code{\link[base]{getwd}()}.  Tilde
    expansion (see \code{\link[base]{path.expand}}) is performed.  Missing
    values will be ignored.  Elements with a marked encoding will
    be converted to the native encoding (and if that fails, considered
    non-existent).}
    \item{\code{pattern}}{an optional \link[base]{regular expression}.  Only file names
    which match the regular expression will be returned.}
    \item{\code{all.files}}{a logical value.  If \code{FALSE}, only the
    names of visible files are returned (following Unix-style visibility,
    that is files whose name does not start with a dot).  If \code{TRUE},
    all file names will be returned.}
    \item{\code{full.names}}{a logical value.  If \code{TRUE}, the directory
    path is prepended to the file names to give a relative file path.
    If \code{FALSE}, the file names (rather than paths) are returned.}
    \item{\code{recursive}}{logical.  Should the listing recurse into directories?}
    \item{\code{ignore.case}}{logical.  Should pattern-matching be case-insensitive?}
    \item{\code{include.dirs}}{logical.  Should subdirectory names be included in
    recursive listings?  (They always are in non-recursive ones).}
    \item{\code{no..}}{logical.  Should both \code{"."} and \code{".."} be excluded
    also from non-recursive listings?}
  }}
}
\value{
返回一个 data.table
}
\description{
读取某个路径下的所有 csv 文件,并添加一列 symbol, 该列的内容是去除后缀的文件名
只能读取 csv 文件
}
\examples{
myfun_example <- function(path = NULL) {
  if (is.null(path)) {
    system.file("extdata", package = "myfun")
  } else {
    system.file("extdata", path, package = "myfun", mustWork = TRUE)
  }
}
path = myfun_example()
df = read_csv_files(path,full.names = TRUE)
head(df)
}
\seealso{
\code{\link[base:list.files]{base::list.files()}}
}
